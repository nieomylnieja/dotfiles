#!/usr/bin/env bash

set -e

flag_r=false

while getopts ":r" OPTION; do
  case $OPTION in
  r) flag_r=true ;;
  ?)
    echo "invalid flag"
    exit 1
    ;;
  esac
done

read_non_empty() {
  local input
  read -r input
  if test -z "$input"; then
    echo >&2 "empty input"
    exit 1
  fi
  echo "$input"
}

new_password() {
  apg -n 1 -m 16 -x 16 -a 0 -M SN
}

generate() {
  path="$(fd -t d -H --base-directory="$HOME/.password-store" | awk '{print}; END { print "New" }' | fzf)"

  if [ "$path" == "New" ]; then
    echo -n "Pass a full path, a new dir will be created: "
    path="$(read_non_empty)"
  else
    echo -n "Pass a relative path to $path dir: "
    path="$path/$(read_non_empty)"
  fi

  echo -n "Provide a username if applicable: "
  read -r username

  local pass="$(new_password)"

  if [ -z "$username" ]; then
    echo "$pass" | pass insert -m "$path"
  else
    cat <<EOF | pass insert -m "$path"
$pass
---
username: $username
url: $(basename "$path")
EOF
  fi

  xclip -sel clip <<<"$pass"
  echo "Created pass $path entry" && exit 0
}

regenerate() {
  path="$(fd -t f -H --base-directory="$HOME/.password-store" .gpg | sed 's/\.gpg//' | fzf)"
  local pass="$(new_password)"

  pass show "$path" | sed "1s/.*/$pass/" | pass insert -f -m "$path"

  xclip -sel clip <<<"$pass"
  echo "Updated pass $path entry" && exit 0
}

main() {
  if $flag_r; then
    regenerate
  else
    generate
  fi
}

main "$@"
