# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# allow aliases
shopt -s expand_aliases

# more powerful pattern matching
shopt -s extglob

# expand env variables
shopt -s direxpand

# Set VIM prompt
alias vim='lvim'
set -o vi

#ignore upper and lowercase when TAB completion
bind "set completion-ignore-case on"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Reload nix home-manager
alias hmr='home-manager switch --flake $DOTFILES/config/home-manager#mh'

# those fancy rust speeders
alias ls='exa --group-directories-first'
alias du='dust'
alias cat='bat'

# Alias definitions.
alias cd..='cd ..'
alias l='ls -1 --icons | fzf --preview "if [ -f {2} ]; then bat --style numbers,changes --color=always {2} | head -500; else tree -C {2} | head -500; fi" | sed -r "s/^.{2}//"'
alias la='ls -a'
alias lt='ls --tree --icons'
alias ll='ls -lah'
alias lls='ls -lah | sort -h -k5'
alias cp="rsync --archive --human-readable --progress --verbose --whole-file"
alias v='vim'
alias open='xdg-open'
alias py='python3'
alias c="xclip -sel clip"
# This one helps with the quasi-jsons produced by mongodb...
alias rm_oid="sed -E 's/(.*)(ObjectId\()(.*)(\)(.*))/\1\3\5/'"

# K8s aliases
alias kpod='kubectl get pod | fzf | head -n1 | awk "{print \$1;}" | tr -d "\n" | c'
alias kexec='kubectl exec -it'
alias kn='kubectl get namespace | fzf | awk '"'"'{print $1}'"'"' | xargs kubectl config set-context --current --namespace'
alias kctx='cat ~/.kube/config | yq '"'"'.contexts | .[].name'"'"' | tr -d "\"" | fzf | xargs kubectl config use-context'
alias ktag='kubectl get deployments | fzf | awk '"'"'{print $1}'"'"' | xargs kubectl describe deployment | grep Image | grep -oE "[^:]+$" | tr -d "\n" | xclip -sel c'
alias podEnv='kubectl get pod -o name | ag intake | xargs -I {} kubectl exec {} -- env | ag -v _SERVICE | ag INTAKE'

# docker aliases
alias docker_clean_images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker_clean_ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'
alias dstop='sudo systemctl stop docker.socket && sudo systemctl stop docker.service'
alias dstart='sudo systemctl start docker.socket && sudo systemctl start docker.service'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -I'

# git
alias gc="git branch --remotes --list | grep -v '^\* ' | tr -d ' ' | sed 's/origin\///' | fzf --preview 'git log origin/{}' | xargs git checkout"

# yay
alias yayd='pacman -Qq | fzf --multi --preview "pacman -Qi {1}" | xargs -ro sudo pacman -Rns'

# Completion
if [[ $PS1 && -f /usr/share/bash-completion/bash_completion ]]; then
  source /usr/share/bash-completion/bash_completion
fi

# Functions
source "$DOTFILES/config/bash/functions"

# FZF configuration
source "$DOTFILES/config/fzf/config.sh"

# haskell
if [ -x "$(command -v stack)" ]; then
	eval "$(stack --bash-completion-script stack)"
fi

# kubectl autocomplete
if [ -x "$(command -v kubectl)" ]; then
	source <(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.
	alias k=kubectl
	# extend completion to work with the alias
	complete -F __start_kubectl k
  export KUBE_EDITOR=lvim
fi

# krew path
if kubectl krew >&/dev/null; then
	export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
	source <(kubectl krew completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.
fi

# Avoid duplicates
HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend
# After each command, append to the history file and reread it
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# nord dircolors
if [ ! -f ~/.dir_colors ]; then
  ln "$DOTFILES/config/dircolors/dir_colors" "$HOME/.dir_colors"
fi

# bat colors
export BAT_THEME="Nord"

# node version manager
if [ -x "$(command -v fnm)" ]; then
	eval "$(fnm env --use-on-cd)"
fi

# colored man pages
export LESS_TERMCAP_mb=$'\e[1;34m'
export LESS_TERMCAP_md=$'\e[1;34m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;95m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;96m'

# bash search history
export HISTSIZE=10000
export HISTFILESIZE=10000

# Spicetify -- an awesome spotify customization cli
if [ -x "$(command -v spicetify-cli)" ]; then
	export SPICETIFY_INSTALL="$HOME/spicetify-cli"
	export PATH="$SPICETIFY_INSTALL:$PATH"
fi

# pyenv path -- place it toward the end of bashrc
if [ -x "$(command -v pyenv)" ]; then
	export PATH="$HOME/.pyenv/bin:$PATH"
	eval "$(pyenv init --path)"
	eval "$(pyenv virtualenv-init -)"
fi

# Zoxide (cd replacement)
if [ -x "$(command -v zoxide)" ]; then
	eval "$(zoxide init bash)"
  alias cd='z'
fi

# Run dircolors to set LS_COLORS in the envs
eval "$(dircolors)"

# starship prompt init, should stay on the bottom
if [ -x "$(command -v starship)" ]; then
	eval "$(starship init bash)"
fi

# Some lua bs...
alias luamake=/home/mh/.dotfiles/clones/lua-language-server/3rd/luamake/luamake

# OCaml
test -r /home/mh/.opam/opam-init/init.sh && . /home/mh/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

# any other custom files to be sourced
if [ -f "$HOME"/nobl9/nobl9rc.bash ]; then
	source "$HOME"/nobl9/nobl9rc.bash
fi
